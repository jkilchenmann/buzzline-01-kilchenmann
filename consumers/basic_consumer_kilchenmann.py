"""
basic_consumer_kilchenmann.py

Read a log file as it is being written. 
"""

#####################################
# Import Modules
#####################################

# Import packages from Python Standard Library
import os
import time

# Import functions from local modules
from utils.utils_logger import logger, get_log_file_path

#####################################
# Define a function to process a single message
# #####################################


def process_message(log_file) -> None:
    """
    Read a log file and process each message.

    Args:
        log_file (str): The path to the log file to read.
    """
    with open(log_file, "r") as file:
        # Move to the end of the file
        file.seek(0, os.SEEK_END)
        print("Consumer is ready and waiting for a new log message...")

        # Use while True loop so the consumer keeps running forever
        last_position = file.tell()
        processed_messages = set()  # To track recently processed messages

        while True:
            file.seek(last_position)  # Ensure the file pointer is in the correct place
            line = file.readline()
            last_position = file.tell()  # Update the position after reading

            # If the line is empty, wait for a new log entry
            if not line:
                time.sleep(1)  # Wait for a second before checking again
                continue

            # We got a new log entry!
            message = line.strip()

            # Avoid reprocessing the same message
            if message in processed_messages:
                continue
            processed_messages.add(message)

            # Limit the size of the memory set to avoid memory issues
            if len(processed_messages) > 1000:
                processed_messages.pop()

            print(f"Consumed log message: {message}")

            # Monitor and alert on special conditions
            if "Cleveland" in message:
                print(f"ALERT: Cleveland!")
                logger.warning(f"Cleveland!")


#####################################
# Define main function for this script.
#####################################


def main() -> None:
    """Main entry point."""

    logger.info("START...")

    # Call the function we imported from utils/utils_logger module
    # to get the path to the log file being generated by the producer.
    # Assign the return value to a local variable.
    log_file_path = get_log_file_path()
    logger.info(f"Reading file located at {log_file_path}.")

    try:
        # Try to call the process_message function with the log file path
        # as an argument. We know things will go wrong
        # eventually when the user stops the process, so we use a try block.
        process_message(log_file_path)

    except KeyboardInterrupt:
        print("User stopped the process.")

    logger.info("END.....")


#####################################
# Conditional Execution
#####################################

# If this file is the one being executed, call the main() function
if __name__ == "__main__":
    main()
